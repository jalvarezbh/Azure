using System.Diagnostics;
using System.Reflection;

var pacPath = System.Environment.GetEnvironmentVariable("pac_path");
var dataverseEnvironment = "https://royalunibrew-core-dev.crm4.dynamics.com";

// entities to be regenerated, separated by semicolon
var entityList = "account";

if (string.IsNullOrEmpty(pacPath))
{
    // try to get from pac.cmd path by using powershell
    Console.WriteLine("Environment variable 'pac_path' is not set, trying to resolve");
    try
    {
        var processStartInfo = new ProcessStartInfo
        {
            FileName = "powershell.exe",
            Arguments = "Get-Command pac | Format-List Path", // Executes the command directly
            UseShellExecute = false,
            RedirectStandardOutput = true,
            CreateNoWindow = true // Prevents a new console window from appearing
        };

        using (var process = new Process { StartInfo = processStartInfo })
        {
            process.Start();
            pacPath = process.StandardOutput.ReadToEnd();
            process.WaitForExit();

            pacPath = pacPath[(pacPath.IndexOf(": ") + 1)..];
        }

        Console.WriteLine($"Path of pac.cmd resolve to {pacPath}");

    }
    catch (Exception ex)
    {
        Console.WriteLine("Unable to resolve pac_path, aborting!");
        return;
    }
}

var outFolder = GetFolderForGeneratingFiles();
var modelbuilderArguments = $"modelbuilder build --outdirectory \"{outFolder}\" --entitynamesfilter \"{entityList}\" " +
                            $"--settingsTemplateFile builderSettings.json --environment \"{dataverseEnvironment}\"";


// See https://aka.ms/new-console-template for more information
Console.WriteLine("This tool will update Dataverse / CRM autogenerated code");
Console.WriteLine("It is recommended that you check in your existing code in case you wish to revert!");

Console.ForegroundColor = ConsoleColor.White;
Console.Write("Enter");
Console.ForegroundColor = ConsoleColor.Green;
Console.Write(" YES ");
Console.ForegroundColor = ConsoleColor.White;
Console.WriteLine("in uppercase letters to continue");
Console.WriteLine($"Code will be generated in folder {outFolder}");



var ans = Console.ReadLine();
if (ans != "YES")
{
    Console.WriteLine("Aborting, no files have been changed");
    return;
}

try
{
    var process = Process.Start(pacPath, modelbuilderArguments);
    process.WaitForExit();
} catch (Exception ex) {
    Console.WriteLine("Could not run pac modelbuilder, make sure 'pac_path' environment points to pac.cmd");
    Console.WriteLine(ex.Message);
}


string GetFolderForGeneratingFiles()
{
    var solutionFolder = GetSolutionFolder();

    var path = Path.Combine(solutionFolder, "ru.core.integrations.customer.core/Model/Dataverse/Autogenerated");

    return path;
}

string? GetSolutionFolder()
{
    // traverse directories and look for solution file
    var location = Assembly.GetEntryAssembly().Location;
    var directory = Path.GetDirectoryName(location) ?? throw new InvalidOperationException("Could not determine the directory of the entry assembly.");

    var solutionFileName = "ru.core.integrations.customer.sln";

    var directoryInfo = new DirectoryInfo(directory);
    while (directoryInfo != null && !File.Exists(Path.Combine(directoryInfo.FullName, solutionFileName)))
    {
        directoryInfo = directoryInfo.Parent;
    }

    if (directoryInfo == null)
    {
        return null; // Solution file not found
    }

    return directoryInfo.FullName;
}